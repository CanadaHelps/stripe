<?php
/*
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC. All rights reserved.                        |
 |                                                                    |
 | This work is published under the GNU AGPLv3 license with some      |
 | permitted exceptions and without any warranty. For full license    |
 | and copyright information, see https://civicrm.org/licensing       |
 +--------------------------------------------------------------------+
 */

/**
 * This api provides a list of events generated by Stripe
 *
 * See the Stripe event reference for a full explanation of the options.
 * https://stripe.com/docs/api#events
 */

use CRM_Stripe_ExtensionUtil as E;

/**
 * Stripe.ListEvents API specification
 *
 * @param array $spec description of fields supported by this API call
 */
function _civicrm_api3_stripe_ListEvents_spec(&$spec) {
  $spec['ppid']['title'] = ts("Use the given Payment Processor ID");
  $spec['ppid']['type'] = CRM_Utils_Type::T_INT;
  $spec['ppid']['api.required'] = TRUE;
  $spec['type']['title'] = ts("Limit to the given Stripe events type, defaults to invoice.payment_succeeded.");
  $spec['type']['api.default'] = 'invoice.payment_succeeded';
  $spec['limit']['title'] = ts("Limit number of results returned (100 is max)");
  $spec['starting_after']['title'] = ts("Only return results after this id.");
  $spec['output']['api.default'] = 'brief';
  $spec['output']['title'] = ts("How to format the output, brief or raw. Defaults to brief.");
  $spec['source']['api.default'] = 'stripe';
  $spec['source']['title'] = ts("List events via the Stripe API (default: stripe) or via the CiviCRM System Log (systemlog).");
  $spec['filter_processed']['title'] = ts("If set to 1, filter out all transactions that have been processed already.");
  $spec['filter_processed']['type'] = CRM_Utils_Type::T_INT;
}

/**
 * Stripe.VerifyEventType
 *
 * @param string $eventType
 *
 * @return boolean True if valid type, false otherwise.
 */
function civicrm_api3_stripe_VerifyEventType($eventType) {
  return in_array($eventType, [
      'account.external_account.created',
      'account.external_account.deleted',
      'account.external_account.updated',
      'application_fee.created',
      'application_fee.refunded',
      'application_fee.refund.updated',
      'balance.available',
      'bitcoin.receiver.created',
      'bitcoin.receiver.filled',
      'bitcoin.receiver.updated',
      'bitcoin.receiver.transaction.created',
      'charge.captured',
      'charge.failed',
      'charge.pending',
      'charge.refunded',
      'charge.succeeded',
      'charge.updated',
      'charge.dispute.closed',
      'charge.dispute.created',
      'charge.dispute.funds_reinstated',
      'charge.dispute.funds_withdrawn',
      'charge.dispute.updated',
      'charge.refund.updated',
      'coupon.created',
      'coupon.deleted',
      'coupon.updated',
      'customer.created',
      'customer.deleted',
      'customer.updated',
      'customer.discount.created',
      'customer.discount.deleted',
      'customer.discount.updated',
      'customer.source.created',
      'customer.source.deleted',
      'customer.source.updated',
      'customer.subscription.created',
      'customer.subscription.deleted',
      'customer.subscription.trial_will_end',
      'customer.subscription.updated',
      'invoice.created',
      'invoice.payment_failed',
      'invoice.payment_succeeded',
      'invoice.upcoming',
      'invoice.updated',
      'invoiceitem.created',
      'invoiceitem.deleted',
      'invoiceitem.updated',
      'order.created',
      'order.payment_failed',
      'order.payment_succeeded',
      'order.updated',
      'order_return.created',
      'payout.canceled',
      'payout.created',
      'payout.failed',
      'payout.paid',
      'payout.updated',
      'plan.created',
      'plan.deleted',
      'plan.updated',
      'product.created',
      'product.deleted',
      'product.updated',
      'recipient.created',
      'recipient.deleted',
      'recipient.updated',
      'review.closed',
      'review.opened',
      'sku.created',
      'sku.deleted',
      'sku.updated',
      'source.canceled',
      'source.chargeable',
      'source.failed',
      'source.transaction.created',
      'transfer.created',
      'transfer.reversed',
      'transfer.updated',
      'ping',
    ]
  );
}

/**
 * Process parameters to determine ppid and sk.
 *
 * @param array $params
 *
 * @return array
 * @throws \API_Exception
 */
function civicrm_api3_stripe_ProcessParams($params) {
  $type = NULL;
  $created = NULL;
  $limit = NULL;
  $starting_after = NULL;
  $sk = NULL;
  $source = 'stripe';
  $filter_processed = 0;

  if (array_key_exists('created', $params) ) {
    $created = $params['created'];
  }
  if (array_key_exists('limit', $params) ) {
    $limit = $params['limit'];
  }
  if (array_key_exists('starting_after', $params) ) {
    $starting_after = $params['starting_after'];
  }

  // Check to see if we should filter by type.
  if (array_key_exists('type', $params) ) {
    // Validate - since we will be appending this to an URL.
    if (!civicrm_api3_stripe_VerifyEventType($params['type'])) {
      throw new API_Exception("Unrecognized Event Type.", 1236);
    }
    else {
      $type = $params['type'];
    }
  }

  // Created can only be passed in as an array
  if (array_key_exists('created', $params)) {
    $created = $params['created'];
    if (!is_array($created)) {
      throw new API_Exception("Created can only be passed in programatically as an array", 1237);
    }
  }

  if (array_key_exists('source', $params)) {
    $allowed = [ 'stripe', 'systemlog' ];
    if (!in_array($params['source'], $allowed)) {
      throw new API_Exception(E::ts("Source can only be set to %1 or %2.", [ 1 => 'stripe', 2 => 'systemlog' ]), 1238);
    }
    $source = $params['source'];
  }

  if (array_key_exists('filter_processed', $params)) {
    $allowed = [ 0, 1 ];
    if (!in_array($params['filter_processed'], $allowed)) {
      throw new API_Exception(E::ts("Filter processed can only be set to 0 or 1."), 1230);
    }
    $filter_processed = $params['filter_processed'];

  }
  return [
    'type' => $type,
    'created' => $created,
    'limit' => $limit,
    'starting_after' => $starting_after,
    'source' => $source,
    'filter_processed' => $filter_processed
  ];
}

/**
 * Stripe.ListEvents API
 *
 * @param array $params
 *
 * @return array API result descriptor
 * @throws \API_Exception
 * @throws \CiviCRM_API3_Exception
 * @throws \Stripe\Exception\UnknownApiErrorException
 */
function civicrm_api3_stripe_Listevents($params) {
  $parsed = civicrm_api3_stripe_ProcessParams($params);
  $type = $parsed['type'];
  $created = $parsed['created'];
  $limit = $parsed['limit'];
  $starting_after = $parsed['starting_after'];
  $source = $parsed['source'];
  $filter_processed = $parsed['filter_processed'];

  $args = [];
  if ($type) {
    $args['type'] = $type;
  }
  if ($created) {
    $args['created'] = $created;
  }
  if ($limit) {
    $args['limit'] = $limit;
  }
  if ($starting_after) {
    $args['starting_after'] = $starting_after;
  }

  if ($source == 'stripe') {
    $processor = new CRM_Core_Payment_Stripe('', civicrm_api3('PaymentProcessor', 'getsingle', ['id' => $params['ppid']]));
    $processor->setAPIParams();
    $data_list = \Stripe\Event::all($args);
  }
  else {
    // The evtid_ part is a crude way to filter for Stripe events.
    $sql = 'SELECT context FROM civicrm_system_log WHERE context LIKE \'{"id":"evt%\' AND context LIKE %0 ORDER BY timestamp DESC limit %1';
    $sql_params = [ 0 => [ '%' . $type . '%', 'String' ], 1 => [ $limit, 'Integer' ] ];
    $dao = CRM_Core_DAO::executeQuery($sql, $sql_params);
    $data_list = [ 'data' => [] ];
    while($dao->fetch()) {
      // This is silly. The stripe library converts everything to an array when they
      // call json_decode, but then seems to somehow rebuild the ['objects'] layer
      // as actual objects. To try to mimic the same results, we don't covert the entire
      // json string to an array, only the data index, leaving the rest as objects.
      $data = (array) json_decode($dao->context);
      $data['data'] = (array) $data['data'];
      $data_list['data'][] = $data;
    }
  }
  $out = $data_list;
  if ($params['output'] == 'brief') {
    $out = [];
    foreach($data_list['data'] as $data) {
      $item = [
        'id' => $data['id'],
        'created' => date('Y-m-d H:i:s', $data['created']),
        'livemode' => $data['livemode'],
        'pending_webhooks' => $data['pending_webhooks'],
        'type' => $data['type'],
      ];
      if (preg_match('/invoice\.payment_/', $data['type'])) {
        $item['invoice'] = $data['data']['object']->id;
        $item['charge'] = $data['data']['object']->charge;
        $item['customer'] = $data['data']['object']->customer;
        $item['subscription'] = $data['data']['object']->subscription;
        $item['total'] = $data['data']['object']->total;

        // We will populate several additional fields based on whether any
        // of this data has been entered into CiviCRM.
        $item['contact_id'] = NULL;
        $item['contribution_recur_id'] = NULL;
        $item['contribution_recur_status_id'] = NULL;
        $item['contribution_id'] = NULL;
        $item['contribution_status_id'] = NULL;
        $item['processed'] = 'no';

        // Check if the customer is in the stripe customer table.
        $results = civicrm_api3('StripeCustomer', 'get', [ 'id' => $data['data']['object']->customer]);
        if ($results['count'] == 1) {
          $value = array_pop($results['values']);
          $item['contact_id'] = $value['contact_id'];
        }
        // Check if recurring contribution can be found.
        $results = civicrm_api3('ContributionRecur', 'get', ['trxn_id' => $item['subscription']]);
        if ($results['count'] > 0) {
          $item['contribution_recur_id'] = $results['id'];
          $contribution_recur = array_pop($results['values']);
          $status_id = $contribution_recur['contribution_status_id'];
          $item['contribution_recur_status_id'] = CRM_Core_PseudoConstant::getName('CRM_Contribute_BAO_Contribution', 'contribution_status_id', $status_id);
        }

        // Check if charge is in the contributions table.
        $contribution = NULL;
        $results = civicrm_api3('Contribution', 'get', ['trxn_id' => $item['charge']]);
        if ($results['count'] > 0) {
          $contribution = array_pop($results['values']);
        }
        else {
          // From 6.0 we store the Stripe Invoice ID in the Contribution.trxn_id if available (ie it's a recur).
          // Otherwise we continue to store the Stripe Charge ID.
          $results = civicrm_api3('Contribution', 'get', ['trxn_id' => $item['invoice']]);
          if ($results['count'] > 0) {
            $contribution = array_pop($results['values']);
          }
        }
        if ($contribution) {
          $item['contribution_id'] = $contribution['id'];
          $status_id = $contribution['contribution_status_id'];
          $item['contribution_status_id'] = CRM_Core_PseudoConstant::getName('CRM_Contribute_BAO_Contribution', 'contribution_status_id', $status_id);
          if ($contribution['contribution_status_id'] == 1) {
            if ($filter_processed == 1) {
              // Woops. All this for nothing. We will filter this one out.
              continue;
            }
            $item['processed'] = 'yes';
          }
        }
      }
      $out[] = $item;
    }
  }
  return civicrm_api3_create_success($out);
}
